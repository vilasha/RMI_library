package client;

import common.Item;
import common.LibraryServer;
import common.WaitingUser;

import java.io.IOException;
import java.net.MalformedURLException;
import java.rmi.Naming;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.logging.FileHandler;
import java.util.logging.Handler;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;

import static common.LibraryServer.*;

/**
 * User client application, allows to assign the user to one of the libraries,
 * and then to perform operations: borrow, return, find-item and exit
 */
public class StartClient {

    /**
     * ID of the current user, generated by server
     */
    private String userId;
    /**
     * List of all the items, current user borrowed from libraries
     */
    private List<String> borrowedItems = new ArrayList<>();

    /**
     * Logger, that will contain all received commands
     */
    private static Logger log;

    /**
     * Entry point for the application
     * @param args ignored
     * @throws RemoteException can be invoked by RMI binding
     * @throws NotBoundException can be invoked by RMI binding
     * @throws MalformedURLException can be invoked by RMI binding
     */
    public static void main(String[] args) throws RemoteException, NotBoundException, MalformedURLException {
        StartClient client = new StartClient();
        client.start();
    }

    /**
     * Starts log to file
     * @param log logger
     */
    private void initLogger(Logger log) {
        FileHandler logHandler;
        try {
            logHandler = new FileHandler("user_" + userId + ".log", true);
            logHandler.setFormatter(new SimpleFormatter());
            log.addHandler(logHandler);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /**
     * Main method of the application. Allows to assign the user to one of the libraries,
     * and then to perform operations: borrow, return, find-item and exit
     * @throws RemoteException can be invoked by RMI binding
     * @throws NotBoundException can be invoked by RMI binding
     * @throws MalformedURLException can be invoked by RMI binding
     */
    private void start() throws RemoteException, NotBoundException, MalformedURLException {
        Scanner sc = new Scanner(System.in);
        int code = 0;
        while (code < 1 || code > 4) {
            System.out.print("Enter your library number: Concordia (1), McGill (2), Montreal (3) > ");
            code = sc.nextInt();
        }
        LibraryServer server = (LibraryServer) Naming.lookup(code == 1 ? URL_CON : (code == 2) ? URL_MCG : URL_MON);
        userId = server.getNextUserId('U');

        log = Logger.getLogger(StartManager.class.getName());
        initLogger(log);

        System.out.println("Your user id is " + userId);
        String welcomeStr = "Available commands: list, my-books, borrow, return, find-item, exit";
        for(;;) {
            // Whenever the item is available again, automatically lend the item to the first user in that queue
            WaitingUser waiting = server.checkWaitingQueue(userId);
            while (waiting != null) {
                System.out.println("Waiting for item = " + waiting.getItemId());
                if (server.borrowItem(waiting.getUserId(), waiting.getItemId(), waiting.getNumberOfDays())) {
                    System.out.println("Successfully borrowed item " + waiting.getItemId()
                            + " for " + waiting.getNumberOfDays() + " days");
                    server.removeFromWaitingList(waiting);
                    borrowedItems.add(waiting.getItemId());
                } else
                    System.out.println("Error borrowing item " + waiting.getItemId());
                waiting = server.checkWaitingQueue(userId);
            }
            String command = sc.nextLine();
            if (command == null || "".equals(command))
                System.out.println(welcomeStr);
            else if ("exit".equals(command.toLowerCase())) {
                for(Handler h : log.getHandlers())
                    h.close();
                break;
            }
            /**
             * When a user invokes this method from his/her library through the server associated with this
             * user (determined by the unique userId prefix), it attempts to borrow the specified item.
             * If the item is from a different library, then the user’s library sends a RMI request to the
             * item’s library to borrow. If the operation was successful, borrow the item and decrement the
             * quantity for that item. Also, display an appropriate message to the user. If the borrow
             * operation is unsuccessful, ask the user if he/she wants to be added in the waiting queue.
             * If prompted no, method ends, otherwise add the userID to the queue corresponding to the
             * requested item and whenever the item is available again, automatically lend the item to the
             * first user in that queue
             */
            else if ("borrow".equals(command.toLowerCase())) {
                System.out.print("Item id: ");
                String itemId = sc.nextLine();
                System.out.print("Number of days: ");
                int numberOfDays = Integer.parseInt(sc.nextLine());
                log.info("Received a command borrow (item id=" + itemId
                        + "; number of days=" + numberOfDays + ")");
                if (server.borrowItem(userId, itemId, numberOfDays)) {
                    log.info("Server response: true");
                    System.out.println("Successfully borrowed a book with ID " + itemId);
                    borrowedItems.add(itemId);
                } else {
                    log.info("Server response: false");
                    // If the borrow operation is unsuccessful, ask the user if he/she wants
                    // to be added in the waiting queue
                    System.out.print("The book is not available at the moment. Would you like" +
                            " to be added to a waiting list? (y/n) ");
                    String answer = sc.nextLine().toLowerCase();
                    // If prompted no, method ends, otherwise add the userID to the queue
                    // corresponding to the requested item
                    if (answer.startsWith("y")) {
                        boolean response = server.addToWaitingList(userId, itemId, numberOfDays);
                        log.info("Client decided to wait in a waiting list for the book," +
                                " server response " + String.valueOf(response));
                        System.out.println(response ? "OK" : "Error during adding to the waiting list");
                    }
                }
            /**
             * When a user invokes this method from his/her library through the server associated with
             * this user (determined by the unique userID prefix) searches the hash map to find the
             * itemID and returns the item to its library. Upon success or failure it returns a message
             * to the user and the logs are updated with this information. It is required to check that
             * an item can only be returned if it was borrowed by the same user who sends the return request
             */
            } else if ("return".equals(command.toLowerCase())) {
                System.out.println("You have these items: " + borrowedItems.toString()
                        + "\nWhich would you like to return?");
                String itemId = sc.nextLine();
                log.info("Received a command return (item id=" + itemId + ")");
                if (borrowedItems.remove(itemId)) {
                    boolean response = server.returnItem(userId, itemId);
                    log.info("Server response " + String.valueOf(response));
                    System.out.println(response ?
                            "Successfully returned" : "Error while returning the item");
                }
                else
                    System.out.println("You didn't borrow such an item");
            /**
             * When a user invokes this method from his/her library through the server associated with this user,
             * that library server gets all the itemIDs with the specified itemNameand the number of such items
             * available in each of the libraries and display them on the console.
             */
            } else if ("find-item".equals(command.toLowerCase())) {
                System.out.print("Please type name (or its part) of the book: ");
                String itemName = sc.nextLine();
                log.info("Received a command find (part of a title=" + itemName + ")");
                List<Item> response = server.findItem(userId, itemName);
                System.out.println("Item ID\t Item name\tQuantity");
                StringBuilder sb = new StringBuilder();
                for (Item item : response)
                    sb.append(item.getItemId()).append("\t").append(item.getItemName())
                            .append("\t").append(item.getQuantity()).append("\n");
                log.info("Server response: " + sb.toString());
                System.out.println(sb.toString());
            } else if ("list".equals(command.toLowerCase())) {
                log.info("Received a command list");
                List<Item> allBooks = server.showAllItems();
                System.out.println("Existing books:\nCode\tBook title");
                StringBuilder sb = new StringBuilder();
                for (Item item : allBooks)
                    sb.append(item.getItemId()).append("\t").append(item.getItemName()).append("\n");
                log.info("Server response: " + sb.toString());
                System.out.println(sb.toString());
            } else if ("my-books".equals(command.toLowerCase())) {
                log.info("Received a command my-books");
                System.out.println("Books I borrowed from libraries: ");
                StringBuilder sb = new StringBuilder();
                for (String item : borrowedItems)
                    sb.append(item).append("\n");
                log.info("Server response: " + sb.toString());
                System.out.println(sb.toString());
            } else
                System.out.println(welcomeStr);
        }
    }
}
