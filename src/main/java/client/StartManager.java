package client;

import common.Item;
import common.LibraryServer;
import server.ServerImpl;

import java.io.IOException;
import java.net.MalformedURLException;
import java.rmi.Naming;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.util.List;
import java.util.Scanner;
import java.util.logging.FileHandler;
import java.util.logging.Handler;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;

import static common.LibraryServer.*;

/**
 * Manager client application, allows to assign the manager to one of the libraries,
 * and then to perform operations: add, remove, list and exit
 */
public class StartManager {

    /**
     * ID of the current manager, generated by server
     */
    private String managerId;

    /**
     * Logger, that will contain all received commands
     */
    private static Logger log;

    /**
     * Starts log to file
     * @param log logger
     */
    private void initLogger(Logger log) {
        FileHandler logHandler;
        try {
            logHandler = new FileHandler("manager_" + managerId + ".log", true);
            logHandler.setFormatter(new SimpleFormatter());
            log.addHandler(logHandler);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /**
     * Entry point for the application
     * @param args ignored
     * @throws RemoteException can be invoked by RMI binding
     * @throws NotBoundException can be invoked by RMI binding
     * @throws MalformedURLException can be invoked by RMI binding
     */
    public static void main(String[] args) throws RemoteException, NotBoundException, MalformedURLException {
        StartManager manager = new StartManager();
        manager.start();
    }

    /**
     * Main method of the application. Allows to assign the manager to one of the libraries,
     * and then to perform operations: add, remove, list and exit
     * @throws RemoteException can be invoked by RMI binding
     * @throws NotBoundException can be invoked by RMI binding
     * @throws MalformedURLException can be invoked by RMI binding
     */
    private void start() throws RemoteException, NotBoundException, MalformedURLException {
        Scanner sc = new Scanner(System.in);
        int code = 0;
        while (code < 1 || code > 4) {
            System.out.print("Enter your library number: Concordia (1), McGill (2), Montreal (3) > ");
            code = sc.nextInt();
        }
        LibraryServer server = (LibraryServer) Naming.lookup(code == 1 ? URL_CON : (code == 2) ? URL_MCG : URL_MON);
        managerId = server.getNextUserId('M');
        System.out.println("Your manager id is " + managerId);

        log = Logger.getLogger(StartManager.class.getName());
        initLogger(log);

        String welcomeStr = "Available commands: add, remove, list, exit";
        for(;;) {
            String command = sc.nextLine();
            if (command == null || "".equals(command))
                System.out.println(welcomeStr);
            else if ("exit".equals(command.toLowerCase())){
                for(Handler h : log.getHandlers())
                    h.close();
                break;
            }
            /**
             * When a manager invokes this method on the associated server (determined by the unique managerID
             * prefix), it attempts to add an item with the information passed, and inserts the record at the
             * appropriate location in the hash map. The server returns information to the manager whether the
             * operation was successful or not. If an item already exists, the new quantity entered should be
             * added to the current quantity of the item. If an item does not exist in the database, then
             * simply add it.
             */
            else if ("add".equals(command.toLowerCase())) {
                System.out.print("Item id: ");
                String itemId = sc.nextLine();
                System.out.print("Item name: ");
                String itemName = sc.nextLine();
                System.out.print("Quantity: ");
                int quantity = Integer.parseInt(sc.nextLine());
                log.info("Received a command add (item id=" + itemId
                        + "; item name=" + itemName + "; quantity=" + quantity + ")");
                String response = server.addItem(managerId, itemId, itemName, quantity);
                log.info("Server response: " + response);
                System.out.println(response);
            /**
             * When invoked by a manager, the server associated with this manager (determined by the unique
             * managerID) searches in the hashmap to find and delete the item. There can be two cases of
             * deletion, first, if the manager wants to decrease the quantity of that item, second, if the
             * manager wants to completely remove the item from the library. Upon success or failure it
             * returns a message to the manager and the logs are updated with this information. If an item
             * does not exist, then obviously there is no deletion performed. Just in case that, if an item
             * exists and a user has borrowed it, then, delete the item and take the necessary actions.
             */
            } else if ("remove".equals(command.toLowerCase())) {
                System.out.print("Item id: ");
                String itemId = sc.nextLine();
                System.out.print("Quantity (-1 means completely remove the item from the library): ");
                int quantity = Integer.parseInt(sc.nextLine());
                log.info("Received a command remove (item id=" + itemId
                        + "; quantity=" + quantity + ")");
                String response = server.removeItem(managerId, itemId, quantity);
                log.info("Server response: " + response);
                System.out.println(response);
            /**
             * When a manager invokes this method from his/her library through the associated server, that
             * library server finds out the names and quantities of each item available in the library
             */
            } else if ("list".equals(command.toLowerCase())) {
                log.info("Received a command list");
                List<Item> response = server.listItemAvailability(managerId);
                System.out.println("Available items\nItem ID\tItem name\tQuantity");
                StringBuilder sb = new StringBuilder();
                for (Item item : response)
                    sb.append(item.getItemId()).append("\t")
                            .append(item.getItemName()).append("\t")
                            .append(item.getQuantity()).append("\n");
                log.info("Server response: " + sb.toString());
                System.out.println(sb.toString());
            } else
                System.out.println(welcomeStr);
        }
    }
}
